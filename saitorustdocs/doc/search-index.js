var searchIndex = JSON.parse('{\
"saito_rust":{"doc":"","i":[[0,"block","saito_rust","",null,null],[3,"Block","saito_rust::block","",null,null],[12,"body","","",0,null],[12,"is_valid","","",0,null],[3,"BlockBody","","",null,null],[12,"id","","",1,null],[12,"ts","","",1,null],[12,"prevbsh","","",1,null],[12,"bf","","",1,null],[3,"BlockHeader","","",null,null],[12,"bsh","","",2,null],[12,"prevbsh","","",2,null],[12,"bid","","",2,null],[12,"ts","","",2,null],[12,"bf","","",2,null],[12,"mintid","","",2,null],[12,"maxtid","","",2,null],[12,"difficulty","","",2,null],[12,"paysplit","","",2,null],[12,"vote","","",2,null],[12,"treasury","","",2,null],[12,"coinbase","","",2,null],[12,"reclaimed","","",2,null],[11,"new","","",2,[[["burnfee",3]],["blockheader",3]]],[0,"burnfee","saito_rust","",null,null],[17,"HEARTBEAT","saito_rust::burnfee","",null,null],[3,"BurnFee","","The Burnfee object which contains our starting value and …",null,null],[12,"start","","",3,null],[12,"current","","",3,null],[11,"new","","Returns the BurnFee used to calculate the work needed to …",3,[[]]],[11,"return_work_needed","","Returns the amount of work needed to produce a block …",3,[[]]],[11,"adjust_work_needed","","",3,[[["blockheader",3]]]],[11,"burn_fee_adjustment","","",3,[[["blockheader",3]]]],[0,"crypto","saito_rust","",null,null],[3,"MerkleTree","saito_rust::crypto","A Merkle tree is a binary tree, with values of type <code>T</code> at …",null,null],[12,"algorithm","","The hashing algorithm used by this Merkle tree",4,null],[8,"Hashable","","The type of values stored in a <code>MerkleTree</code> must implement …",null,null],[10,"update_context","","Update the given <code>context</code> with <code>self</code>.",5,[[["context",3]]]],[7,"SHA256","","SHA-256 as specified in FIPS 180-4.",null,null],[3,"Context","","A context for multi-step (Init-Update-Finish) digest …",null,null],[12,"algorithm","","The context\'s algorithm.",6,null],[3,"Secp256k1","","The secp256k1 engine, used to execute all signature …",null,null],[3,"Message","","A (hashed) message input to an ECDSA signature",null,null],[3,"Signature","","An ECDSA signature",null,null],[3,"SecretKey","","Secret 256-bit key used as <code>x</code> in an ECDSA signature",null,null],[3,"PublicKey","","A Secp256k1 public key, used for verification of …",null,null],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",7,[[]]],[11,"next_u64","","Return the next random u64.",7,[[]]],[11,"next_f32","","Return the next random f32 selected from the half-open …",7,[[]]],[11,"next_f64","","Return the next random f64 selected from the half-open …",7,[[]]],[11,"fill_bytes","","Fill <code>dest</code> with random data.",7,[[]]],[11,"gen","","Return a random value of a <code>Rand</code> type.",7,[[]]],[11,"gen_iter","","Return an iterator that will yield an infinite number of …",7,[[],["generator",3]]],[11,"gen_range","","Generate a random value in the range [<code>low</code>, <code>high</code>).",7,[[]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",7,[[]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set …",7,[[],["asciigenerator",3]]],[11,"choose","","Return a random element from <code>values</code>.",7,[[],["option",4]]],[11,"choose_mut","","Return a mutable pointer to a random element from <code>values</code>.",7,[[],["option",4]]],[11,"shuffle","","Shuffle a mutable slice in place.",7,[[]]],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number…",null,[[],["threadrng",3]]],[8,"ToBase58","","A trait for converting a value to base58 encoded string.",null,null],[10,"to_base58","","Converts a value of <code>self</code> to a base58 value, returning the …",8,[[],["string",3]]],[3,"ReadablePublicKey","","",null,null],[12,"0","","",9,null],[3,"ReadablePrivateKey","","",null,null],[12,"0","","",10,null],[5,"generate_keys","","",null,[[]]],[5,"generate_random_data","","",null,[[],["vec",3]]],[5,"hash","","",null,[[["vec",3]]]],[5,"sign","","",null,[[["secretkey",3]],["signature",3]]],[0,"helper","saito_rust","",null,null],[5,"create_timestamp","saito_rust::helper","",null,[[]]],[5,"format_timestamp","","",null,[[],[["delayedformat",3],["strftimeitems",3]]]],[0,"hop","saito_rust","",null,null],[3,"Hop","saito_rust::hop","",null,null],[12,"from","","",11,null],[12,"to","","",11,null],[11,"new","","",11,[[["signature",3],["publickey",3]],["hop",3]]],[0,"mempool","saito_rust","",null,null],[3,"Mempool","saito_rust::mempool","",null,null],[12,"transactions","","",12,null],[11,"new","","",12,[[],["mempool",3]]],[11,"add_block","","",12,[[["block",3]]]],[11,"add_transaction","","",12,[[["transaction",3]]]],[11,"clear_transactions","","",12,[[]]],[0,"slip","saito_rust","",null,null],[3,"Slip","saito_rust::slip","",null,null],[12,"spent_status","","",13,null],[3,"SlipBody","","",null,null],[4,"SlipBroadcastType","","",null,null],[13,"Normal","","",14,null],[13,"GoldenTicket","","",14,null],[13,"Fee","","",14,null],[13,"Rebroadcast","","",14,null],[13,"VIP","","",14,null],[13,"GoldenChunk","","",14,null],[4,"SlipSpentStatus","","",null,null],[13,"Unspent","","",15,null],[13,"Spent","","",15,null],[13,"Pending","","",15,null],[11,"new","","",13,[[["publickey",3]],["slip",3]]],[11,"return_amt","","",13,[[]]],[11,"set_ids","","",13,[[]]],[11,"set_amt","","",13,[[]]],[11,"set_broadcast_type","","",13,[[["slipbroadcasttype",4]]]],[11,"set_spent_status","","",13,[[["slipspentstatus",4]]]],[11,"return_add","","",13,[[],["publickey",3]]],[11,"return_signature_source","","",13,[[],["vec",3]]],[11,"set_bsh","","",13,[[]]],[0,"transaction","saito_rust","",null,null],[4,"TransactionBroadcastType","saito_rust::transaction","",null,null],[13,"Normal","","",16,null],[13,"GoldenTicket","","",16,null],[13,"Fee","","",16,null],[13,"Rebroadcast","","",16,null],[13,"VIP","","",16,null],[13,"GoldenChunk","","",16,null],[3,"TransactionBody","","",null,null],[12,"to","","",17,null],[12,"from","","",17,null],[12,"typ","","",17,null],[12,"msg","","",17,null],[3,"Transaction","","",null,null],[12,"body","","",18,null],[11,"new","","",18,[[],["transaction",3]]],[11,"from","saito_rust::block","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","saito_rust::burnfee","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","saito_rust::crypto","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","saito_rust::hop","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","saito_rust::mempool","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","saito_rust::slip","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","saito_rust::transaction","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"partial_cmp","saito_rust::crypto","",4,[[["merkletree",3]],[["ordering",4],["option",4]]]],[11,"cmp","","",4,[[["merkletree",3]],["ordering",4]]],[11,"eq","","",4,[[["merkletree",3]]]],[11,"fmt","","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",4,[[]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves …",4,[[]]],[11,"clone","","",4,[[],["merkletree",3]]],[11,"clone","","",6,[[],["context",3]]],[11,"fmt","","",23,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",21,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",20,[[["message",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",22,[[["secretkey",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",23,[[["publickey",3]],[["ordering",4],["option",4]]]],[11,"lt","","",23,[[["publickey",3]]]],[11,"le","","",23,[[["publickey",3]]]],[11,"gt","","",23,[[["publickey",3]]]],[11,"ge","","",23,[[["publickey",3]]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"from_str","","",21,[[],[["result",4],["signature",3],["error",4]]]],[11,"from_str","","",22,[[],[["result",4],["secretkey",3],["error",4]]]],[11,"from_str","","",23,[[],[["result",4],["publickey",3],["error",4]]]],[11,"from","","Converts a 32-byte hash directly to a message without …",20,[[],["message",3]]],[11,"from","","",21,[[["signature",3]],["signature",3]]],[11,"from","","",23,[[["publickey",3]],["publickey",3]]],[11,"hash","","",23,[[]]],[11,"clone","","",22,[[],["secretkey",3]]],[11,"clone","","",19,[[],["secp256k1",3]]],[11,"clone","","",23,[[],["publickey",3]]],[11,"clone","","",21,[[],["signature",3]]],[11,"clone","","",20,[[],["message",3]]],[11,"deserialize","","",22,[[],[["result",4],["secretkey",3]]]],[11,"deserialize","","",21,[[],[["result",4],["signature",3]]]],[11,"deserialize","","",23,[[],[["result",4],["publickey",3]]]],[11,"cmp","","",23,[[["publickey",3]],["ordering",4]]],[11,"cmp","","",22,[[["secretkey",3]],["ordering",4]]],[11,"cmp","","",20,[[["message",3]],["ordering",4]]],[11,"eq","","",23,[[["publickey",3]]]],[11,"ne","","",23,[[["publickey",3]]]],[11,"eq","","",22,[[["secretkey",3]]]],[11,"eq","","",21,[[["signature",3]]]],[11,"ne","","",21,[[["signature",3]]]],[11,"eq","","",20,[[["message",3]]]],[11,"eq","","",19,[[["secp256k1",3]]]],[11,"index","","",22,[[["rangefrom",3]]]],[11,"index","","",22,[[["rangefull",3]]]],[11,"index","","",20,[[]]],[11,"index","","",20,[[["range",3]]]],[11,"index","","",20,[[["rangefrom",3]]]],[11,"index","","",22,[[["rangeto",3]]]],[11,"index","","",22,[[["range",3]]]],[11,"index","","",22,[[]]],[11,"index","","",20,[[["rangeto",3]]]],[11,"index","","",20,[[["rangefull",3]]]],[11,"fmt","","",20,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",21,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",23,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",19,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",19,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",19,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"drop","","",19,[[]]],[11,"clone","saito_rust::block","",0,[[],["block",3]]],[11,"clone","","",1,[[],["blockbody",3]]],[11,"clone","","",2,[[],["blockheader",3]]],[11,"clone","saito_rust::burnfee","",3,[[],["burnfee",3]]],[11,"clone","saito_rust::hop","",11,[[],["hop",3]]],[11,"clone","saito_rust::mempool","",12,[[],["mempool",3]]],[11,"clone","saito_rust::slip","",13,[[],["slip",3]]],[11,"clone","","",24,[[],["slipbody",3]]],[11,"clone","","",14,[[],["slipbroadcasttype",4]]],[11,"clone","","",15,[[],["slipspentstatus",4]]],[11,"clone","saito_rust::transaction","",16,[[],["transactionbroadcasttype",4]]],[11,"clone","","",18,[[],["transaction",3]]],[11,"clone","","",17,[[],["transactionbody",3]]],[11,"eq","saito_rust::block","",0,[[["block",3]]]],[11,"ne","","",0,[[["block",3]]]],[11,"eq","","",1,[[["blockbody",3]]]],[11,"ne","","",1,[[["blockbody",3]]]],[11,"eq","","",2,[[["blockheader",3]]]],[11,"ne","","",2,[[["blockheader",3]]]],[11,"eq","saito_rust::burnfee","",3,[[["burnfee",3]]]],[11,"ne","","",3,[[["burnfee",3]]]],[11,"eq","saito_rust::hop","",11,[[["hop",3]]]],[11,"ne","","",11,[[["hop",3]]]],[11,"eq","saito_rust::slip","",13,[[["slip",3]]]],[11,"ne","","",13,[[["slip",3]]]],[11,"eq","","",24,[[["slipbody",3]]]],[11,"ne","","",24,[[["slipbody",3]]]],[11,"eq","","",14,[[["slipbroadcasttype",4]]]],[11,"eq","","",15,[[["slipspentstatus",4]]]],[11,"eq","saito_rust::transaction","",16,[[["transactionbroadcasttype",4]]]],[11,"eq","","",17,[[["transactionbody",3]]]],[11,"ne","","",17,[[["transactionbody",3]]]],[11,"eq","","",18,[[["transaction",3]]]],[11,"ne","","",18,[[["transaction",3]]]],[11,"fmt","saito_rust::block","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","saito_rust::burnfee","",3,[[["formatter",3]],["result",6]]],[11,"fmt","saito_rust::crypto","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","saito_rust::hop","",11,[[["formatter",3]],["result",6]]],[11,"fmt","saito_rust::mempool","",12,[[["formatter",3]],["result",6]]],[11,"fmt","saito_rust::slip","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","saito_rust::transaction","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"serialize","saito_rust::block","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","saito_rust::burnfee","",3,[[],["result",4]]],[11,"serialize","saito_rust::crypto","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","saito_rust::hop","",11,[[],["result",4]]],[11,"serialize","saito_rust::slip","",13,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","saito_rust::transaction","",16,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"deserialize","saito_rust::block","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","saito_rust::burnfee","",3,[[],["result",4]]],[11,"deserialize","saito_rust::crypto","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","saito_rust::hop","",11,[[],["result",4]]],[11,"deserialize","saito_rust::slip","",13,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","saito_rust::transaction","",16,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"from_vec","saito_rust::crypto","Constructs a Merkle Tree from a vector of data blocks. …",4,[[["algorithm",3],["vec",3],["global",3]],["merkletree",3]]],[11,"root_hash","","Returns the root hash of Merkle tree",4,[[],["vec",3]]],[11,"height","","Returns the height of Merkle tree",4,[[]]],[11,"count","","Returns the number of leaves in the Merkle tree",4,[[]]],[11,"is_empty","","Returns whether the Merkle tree is empty or not",4,[[]]],[11,"gen_proof","","Generate an inclusion proof for the given value. Returns …",4,[[],[["option",4],["proof",3]]]],[11,"gen_nth_proof","","Generate an inclusion proof for the <code>n</code>-th leaf value.",4,[[],[["option",4],["proof",3]]]],[11,"iter","","Creates an <code>Iterator</code> over the values contained in this …",4,[[],["leavesiterator",3]]],[11,"new","","Constructs a new context.",6,[[["algorithm",3]],["context",3]]],[11,"update","","Updates the digest with all the data in <code>data</code>. <code>update</code> may …",6,[[]]],[11,"finish","","Finalizes the digest calculation and returns the digest …",6,[[],["digest",3]]],[11,"algorithm","","The algorithm that this context is using.",6,[[],["algorithm",3]]],[11,"new","","Creates a new Secp256k1 context with all capabilities",19,[[],[["secp256k1",3],["all",3]]]],[11,"signing_only","","Creates a new Secp256k1 context that can only be used for …",19,[[],[["secp256k1",3],["signonly",3]]]],[11,"verification_only","","Creates a new Secp256k1 context that can only be used for …",19,[[],[["verifyonly",3],["secp256k1",3]]]],[11,"randomize","","(Re)randomizes the Secp256k1 context for cheap …",19,[[]]],[11,"sign","","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> …",19,[[["secretkey",3],["message",3]],["signature",3]]],[11,"sign_recoverable","","Constructs a signature for <code>msg</code> using the secret key <code>sk</code> …",19,[[["secretkey",3],["message",3]],["recoverablesignature",3]]],[11,"generate_keypair","","Generates a random keypair. Convenience function for …",19,[[]]],[11,"recover","","Determines the public key for which <code>sig</code> is a valid …",19,[[["message",3],["recoverablesignature",3]],[["result",4],["publickey",3],["error",4]]]],[11,"verify","","Checks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …",19,[[["signature",3],["publickey",3],["message",3]],[["error",4],["result",4]]]],[11,"from_slice","","Converts a <code>MESSAGE_SIZE</code>-byte slice to a message object",20,[[],[["message",3],["result",4],["error",4]]]],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",20,[[]]],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI …",20,[[]]],[11,"len","","Returns the length of the object as an array",20,[[]]],[11,"is_empty","","Returns whether the object as an array is empty",20,[[]]],[11,"from_der","","Converts a DER-encoded byte slice to a signature",21,[[],[["result",4],["signature",3],["error",4]]]],[11,"from_compact","","Converts a 64-byte compact-encoded byte slice to a …",21,[[],[["result",4],["signature",3],["error",4]]]],[11,"from_der_lax","","Converts a \\\"lax DER\\\"-encoded byte slice to a signature. …",21,[[],[["result",4],["signature",3],["error",4]]]],[11,"normalize_s","","Normalizes a signature to a \\\"low S\\\" form. In ECDSA, …",21,[[]]],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",21,[[]]],[11,"as_mut_ptr","","Obtains a raw mutable pointer suitable for use with FFI …",21,[[]]],[11,"serialize_der","","Serializes the signature in DER format",21,[[],[["global",3],["vec",3]]]],[11,"serialize_compact","","Serializes the signature in compact format",21,[[]]],[11,"new","","Creates a new random secret key. Requires compilation …",22,[[],["secretkey",3]]],[11,"from_slice","","Converts a <code>SECRET_KEY_SIZE</code>-byte slice to a secret key",22,[[],[["result",4],["secretkey",3],["error",4]]]],[11,"add_assign","","Adds one secret key to another, modulo the curve order. …",22,[[],[["error",4],["result",4]]]],[11,"mul_assign","","Multiplies one secret key by another, modulo the curve …",22,[[],[["error",4],["result",4]]]],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",22,[[]]],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI …",22,[[]]],[11,"len","","Returns the length of the object as an array",22,[[]]],[11,"is_empty","","Returns whether the object as an array is empty",22,[[]]],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",23,[[]]],[11,"from_secret_key","","Creates a new public key from a secret key.",23,[[["secretkey",3],["secp256k1",3]],["publickey",3]]],[11,"from_slice","","Creates a public key directly from a slice",23,[[],[["result",4],["publickey",3],["error",4]]]],[11,"serialize","","Serialize the key as a byte-encoded pair of values. In …",23,[[]]],[11,"serialize_uncompressed","","Serialize the key as a byte-encoded pair of values, in …",23,[[]]],[11,"add_exp_assign","","Adds the pk corresponding to <code>other</code> to the pk <code>self</code> in place…",23,[[["secp256k1",3]],[["error",4],["result",4]]]],[11,"mul_assign","","Muliplies the pk <code>self</code> in place by the scalar <code>other</code> Will …",23,[[["secp256k1",3]],[["error",4],["result",4]]]],[11,"combine","","Adds a second key to this one, returning the sum. Returns …",23,[[["publickey",3]],[["result",4],["publickey",3],["error",4]]]]],"p":[[3,"Block"],[3,"BlockBody"],[3,"BlockHeader"],[3,"BurnFee"],[3,"MerkleTree"],[8,"Hashable"],[3,"Context"],[8,"Rng"],[8,"ToBase58"],[3,"ReadablePublicKey"],[3,"ReadablePrivateKey"],[3,"Hop"],[3,"Mempool"],[3,"Slip"],[4,"SlipBroadcastType"],[4,"SlipSpentStatus"],[4,"TransactionBroadcastType"],[3,"TransactionBody"],[3,"Transaction"],[3,"Secp256k1"],[3,"Message"],[3,"Signature"],[3,"SecretKey"],[3,"PublicKey"],[3,"SlipBody"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);